//
//  LPLoggerDemo.swift
//  LPLoggerDemo
//
//  Created by pengli on 2018/5/21.
//  Copyright ¬© 2018Âπ¥ pengli. All rights reserved.
//

import Foundation
import LPLogger

/// Êó•ÂøóË∞ÉËØïÂô®
let log: LPLogger = {
    let log = LPLogger.shared
    
    /// ËÆæÁΩÆÂú®DEBUGÁâàÊú¨‰∏ã‰ΩøÁî®printÊâìÂç∞Êó•Âøó...
    #if DEBUG // ÂèØÂú® ‚ÄúBuild Settings‚Äù -> ‚ÄúOther Swift Flags‚Äù ‰∏ãËÆæÁΩÆ
    let consoleDestination = LPConsoleDestination(identifier: LPLogger.Constants.baseConsoleDestinationIdentifier)
    consoleDestination.showThreadName = true
    consoleDestination.outputLevel = .debug
    log.add(destination: consoleDestination)
    
    let emojiFormatter = LPPrePostFixLogFormatter()
    emojiFormatter.apply(prefix: "üóØüóØüóØ ", postfix: " üóØüóØüóØ", to: .verbose)
    emojiFormatter.apply(prefix: "üîπüîπüîπ ", postfix: " üîπüîπüîπ", to: .debug)
    emojiFormatter.apply(prefix: "‚ÑπÔ∏è‚ÑπÔ∏è‚ÑπÔ∏è ", postfix: " ‚ÑπÔ∏è‚ÑπÔ∏è‚ÑπÔ∏è", to: .info)
    emojiFormatter.apply(prefix: "‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è ", postfix: " ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è", to: .warning)
    emojiFormatter.apply(prefix: "‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è ", postfix: " ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è", to: .error)
    emojiFormatter.apply(prefix: "üí£üí£üí£ ", postfix: " üí£üí£üí£", to: .severe)
    log.formatters = [emojiFormatter]
    #endif
    
    /// ‰ΩøÁî®Êñá‰ª∂ËÆ∞ÂΩïÊó•ÂøóÔºõÔºàÂè™Âú®DEBUGÂíåADHOC‰∏ãÊúâÊïàÔºâ
    #if USE_FILELOGGING // ÂèØÂú® ‚ÄúBuild Settings‚Äù -> ‚ÄúOther Swift Flags‚Äù ‰∏ãËÆæÁΩÆ
    if let cacheURL = FileManager.default.urls(for: .cachesDirectory,
                                               in: .userDomainMask).last {
        // Create a file log destination
        let logPath = cacheURL.appendingPathComponent("LPLogging/logDemo  .log")
        
        let fileDestination = LPAutoRotatingFileDestination(
            writeToFile: logPath,
            identifier: LPLogger.Constants.fileDestinationIdentifier,
            shouldAppend: true,
            attributes: [.protectionKey:
                FileProtectionType.completeUntilFirstUserAuthentication])
        
        // Optionally set some configuration options
        fileDestination.outputLevel = .error
        fileDestination.showThreadName = true
        
        // Process this destination in the background
        fileDestination.logQueue = LPLogger.logQueue
        
        // Add colour (using the ANSI format) to our file log, you can see the colour when `cat`ing or `tail`ing the file in Terminal on macOS
        let colorFormatter = LPANSIColorLogFormatter()
        colorFormatter.colorize(level: .verbose, with: .colorIndex(number: 244), options: [.faint])
        colorFormatter.colorize(level: .debug, with: .black)
        colorFormatter.colorize(level: .info, with: .blue, options: [.underline])
        colorFormatter.colorize(level: .warning, with: .yellow)
        colorFormatter.colorize(level: .error, with: .red, options: [.bold])
        colorFormatter.colorize(level: .severe, with: .white, on: .red)
        
        fileDestination.formatters = [colorFormatter]
        
        // Add the destination to the logger
        log.add(destination: fileDestination)
    }
    #endif
    return log
}()
